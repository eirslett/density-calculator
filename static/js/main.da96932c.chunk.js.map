{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["initial","measureBefore","measureSubmerged","failure","message","type","isNumber","str","length","Number","isNaN","App","useState","state","setState","result","before","submerged","value","Math","round","calculate","className","htmlFor","min","step","name","onChange","ev","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4QAQMA,G,YAAU,CACZC,cAAe,GACfC,iBAAkB,KAgBtB,SAASC,EAAQC,GACb,MAAO,CACHC,KAAM,UACND,WAIR,SAASE,EAASC,GACd,OAAOA,EAAIC,OAAS,IAAMC,OAAOC,MAAMD,OAAOF,IA0DnCI,MA5Bf,WAAgB,IAAD,EACeC,mBAASZ,GADxB,mBACJa,EADI,KACGC,EADH,KAELC,EA9BV,SAAmBF,GACf,GAA4B,KAAxBA,EAAMZ,eAAmD,KAA3BY,EAAMX,iBACpC,MAAO,CACHG,KAAM,WAGd,IAAKC,EAASO,EAAMZ,eAChB,OAAOE,EAAQ,wCAEnB,IAAMa,EAASP,OAAOI,EAAMZ,eAC5B,GAAIe,GAAU,EACV,OAAOb,EAAQ,8CAGnB,IAAKG,EAASO,EAAMX,kBAChB,OAAOC,EAAQ,2CAEnB,IAAMc,EAAYR,OAAOI,EAAMX,kBAC/B,OAAIe,GAAa,EACNd,EAAQ,iDAGZ,CACHE,KAAM,UACNa,MAAOC,KAAKC,MAAM,IAAMJ,GAAUC,EAAYD,KAMnCK,CAAUR,GAEzB,OACI,yBAAKS,UAAU,OACX,0BAAMA,UAAU,+BACZ,kCACA,sDAEA,yBAAKA,UAAU,sBACX,2BAAOC,QAAQ,iBAAf,sBACA,2BAAOlB,KAAK,SAASmB,IAAI,IAAIC,KAAK,OAAOC,KAAK,gBAAgBR,MAAOL,EAAMZ,cAAe0B,SAAU,SAAAC,GAAE,OAAId,EAAS,2BAAKD,GAAN,IAAaZ,cAAe2B,EAAGC,OAAOX,aAG5J,yBAAKI,UAAU,sBACX,2BAAOC,QAAQ,oBAAf,yBACA,2BAAOlB,KAAK,SAASmB,IAAI,IAAIC,KAAK,OAAOC,KAAK,mBAAmBR,MAAOL,EAAMX,iBAAkByB,SAAU,SAAAC,GAAE,OAAId,EAAS,2BAAKD,GAAN,IAAaX,iBAAkB0B,EAAGC,OAAOX,eAKxJ,YAAhBH,EAAOV,MAAsB,yCAAeU,EAAOG,OACnC,YAAhBH,EAAOV,MAAsB,6BAAMU,EAAOX,WC3EnC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.da96932c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport 'purecss';\n\ninterface State {\n    measureBefore: string\n    measureSubmerged: string\n}\nconst initial = {\n    measureBefore: '',\n    measureSubmerged: ''\n};\n\ninterface Success {\n    type: 'SUCCESS',\n    value: number\n}\ninterface Waiting {\n    type: 'WAITING'\n}\ninterface Failure {\n    type: 'FAILURE',\n    message: string\n}\ntype Result = Success | Waiting | Failure\n\nfunction failure(message: string): Failure {\n    return {\n        type: 'FAILURE',\n        message\n    };\n}\n\nfunction isNumber(str: string): boolean {\n    return str.length > 0 && !Number.isNaN(Number(str));\n}\nfunction calculate(state: State): Result {\n    if (state.measureBefore === '' || state.measureSubmerged === '') {\n        return {\n            type: 'WAITING'\n        };\n    }\n    if (!isNumber(state.measureBefore)) {\n        return failure('Measurement before must be a number.');\n    }\n    const before = Number(state.measureBefore);\n    if (before <= 0) {\n        return failure('Measurement before must be greater than 0.');\n    }\n\n    if (!isNumber(state.measureSubmerged)) {\n        return failure('Measurement submerged must be a number.');\n    }\n    const submerged = Number(state.measureSubmerged);\n    if (submerged <= 0) {\n        return failure('Measurement submerged must be greater than 0.');\n    }\n\n    return {\n        type: 'SUCCESS',\n        value: Math.round(100 * before / (submerged + before))\n    };\n}\n\nfunction App() {\n    const [state, setState] = useState(initial);\n    const result = calculate(state);\n\n    return (\n        <div className=\"App\">\n            <form className=\"pure-form pure-form-aligned\">\n                <fieldset>\n                <legend>Density Calculator</legend>\n\n                <div className=\"pure-control-group\">\n                    <label htmlFor=\"measureBefore\">Measurement before</label>\n                    <input type=\"number\" min=\"0\" step=\"0.01\" name=\"measureBefore\" value={state.measureBefore} onChange={ev => setState({ ...state, measureBefore: ev.target.value })} />\n                </div>\n\n                <div className=\"pure-control-group\">\n                    <label htmlFor=\"measureSubmerged\">Measurement submerged</label>\n                    <input type=\"number\" min=\"0\" step=\"0.01\" name=\"measureSubmerged\" value={state.measureSubmerged} onChange={ev => setState({ ...state, measureSubmerged: ev.target.value })} />\n                </div>\n                </fieldset>\n            </form>\n\n            {result.type === 'SUCCESS' && <div>Density: {result.value}</div>}\n            {result.type === 'FAILURE' && <div>{result.message}</div>}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}